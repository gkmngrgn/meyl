name: release

on:
    push:
        tags:
            - "[0-9]+.[0-9]+.[0-9]+"

env:
    CARGO_INCREMENTAL: 0
    CARGO_NET_RETRY: 10
    RUSTFLAGS: -D warnings
    RUSTUP_MAX_RETRIES: 10
    APP_NAME: meyl

jobs:
    dist:
        name: dist
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]

        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Install Rust toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  profile: minimal
                  override: true

            - name: Build release binary
              run: cargo build --verbose --release

            - name: Strip release binary
              if: matrix.os != 'windows-latest'
              run: strip target/release/${{ env.APP_NAME }}

            - name: Create archive
              shell: bash
              run: |
                  if [ "${{ matrix.os }}" = "windows-latest" ]; then
                      mkdir archive
                      cp target/release/${{ env.APP_NAME }}.exe README.md archive/
                      7z a archive.zip ./archive/*
                  else
                      zip --junk-paths archive target/release/${{ env.APP_NAME }} README.md
                  fi

            - name: Upload artifacts
              uses: actions/upload-artifact@v1
              with:
                  name: ${{ env.APP_NAME }}-${{ matrix.os }}
                  path: archive.zip

    release:
        name: release
        runs-on: ubuntu-latest
        needs: ["dist"]
        steps:
            - name: Get the release version from the tag
              run: echo "::set-env name=APP_VERSION::${GITHUB_REF#refs/tags/}"

            - name: Create release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ env.APP_VERSION }}
                  release_name: ${{ env.APP_VERSION }}
                  draft: false
                  prerelease: false

        outputs:
            upload_url: ${{ steps.create_release.outputs.upload_url }}

    publish:
        name: publish
        runs-on: ubuntu-latest
        needs: ["dist", "release"]
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]

        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Download artifact
              uses: actions/download-artifact@v1
              with:
                  name: ${{ env.APP_NAME }}-${{ matrix.os }}
                  path: dist

            - name: Get the release version from the tag
              run: echo "::set-env name=APP_VERSION::${GITHUB_REF#refs/tags/}"

            - name: Upload articats
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ needs.release.outputs.upload_url }}
                  asset_path: ./dist/archive.zip
                  asset_name: ${{ env.APP_NAME }}-${{ matrix.os }}-${{ env.APP_VERSION }}.zip
                  asset_content_type: application/zip
